# =====================================================================
# Funnel Analytics Platform - Modern Code Quality Configuration
# =====================================================================

[project]
name = "funnel-analytics-platform"
description = "Enterprise-grade funnel analytics platform for analyzing user conversion journeys"
version = "1.0.0"
requires-python = ">=3.9"

# =====================================================================
# Ruff Configuration (The Blazing Fast Linter & Formatter)
# =====================================================================
[tool.ruff]
line-length = 99
target-version = "py39"

# Files to exclude from linting
exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Select rule sets appropriate for data science projects:
# E/W: pycodestyle errors/warnings (PEP 8 compliance)
# F: pyflakes (undefined names, unused imports, etc.)
# I: isort (import sorting and organization)
# B: flake8-bugbear (finds likely bugs and design problems)
# C4: flake8-comprehensions (better list/dict comprehensions)
# SIM: flake8-simplify (suggests code simplifications)
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]

# Ignore rules that are too strict for data science/research code
ignore = [
    "E501",   # Line too long, handled by ruff-format
    "E203",   # Whitespace before ':', conflicts with formatter
    "E722",   # Bare except (common in data processing for robustness)
    "B905",   # zip() without explicit strict= parameter
    "B007",   # Loop control variable not used (common in data processing)
    "B011",   # assert False (used in tests)
    "B023",   # Function definition does not bind loop variable (common pattern)
    "B030",   # Except handlers should only be exception classes
    "C400",   # Unnecessary generator (sometimes more readable)
    "C401",   # Unnecessary generator (sometimes more readable)
    "C414",   # Unnecessary list call within sorted()
    "F841",   # Local variable assigned but never used (common in debugging)
    "N802",   # Function name should be lowercase (allow DISABLED functions)
    "N803",   # Argument name should be lowercase (scientific variables)
    "N806",   # Variable in function should be lowercase (scientific variables)
    "N812",   # Lowercase imported as non-lowercase (pandas as pd, etc.)
    "SIM102", # Use single if statement (nested ifs sometimes clearer)
    "SIM105", # Use contextlib.suppress (explicit try/except sometimes clearer)
    "SIM108", # Use ternary operator (sometimes less readable)
    "SIM118", # Use key in dict instead of key in dict.keys() (sometimes needed)
    "W505",   # Doc line too long (documentation can be longer)
    "E402",   # Module level import not at top (common in notebooks/scripts)
    "E712",   # Comparison to True/False (sometimes explicit is clearer)
]

[tool.ruff.lint.isort]
# Configure import sorting for the project structure
known-first-party = ["models", "path_analyzer"]
known-third-party = ["streamlit", "pandas", "polars", "numpy", "plotly", "clickhouse_connect"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = true
combine-as-imports = true
from-first = false

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like mutable lists (common in data science)
extend-immutable-calls = ["streamlit.cache_data", "streamlit.cache_resource"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 120  # Allow longer documentation lines

[tool.ruff.format]
# Use ruff's formatter instead of Black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# =====================================================================
# Mypy Configuration (The Static Type Checker)
# =====================================================================
[tool.mypy]
python_version = "3.9"
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = false  # Allow unused ignores for flexibility
warn_unreachable = true

# Strictness settings (relaxed for data science workflows)
check_untyped_defs = false  # More lenient for data science code
disallow_untyped_defs = false  # Allow untyped defs for flexibility
disallow_incomplete_defs = false
disallow_untyped_decorators = false  # Many streamlit decorators are untyped
no_implicit_optional = false  # Allow implicit Optional types

# Handle missing library type information gracefully
ignore_missing_imports = true
follow_imports = "silent"
show_error_codes = true

# Skip checking third-party packages to avoid compatibility issues
no_site_packages = true

# Additional relaxed settings for data science projects
warn_no_return = false
warn_return_any = false
explicit_package_bases = true
disable_error_code = ["var-annotated", "assignment", "arg-type", "return-value", "index", "attr-defined", "operator", "union-attr", "has-type", "unreachable"]

# Output configuration
pretty = true
show_column_numbers = true
show_error_context = true

# Performance optimization
cache_dir = ".mypy_cache"
incremental = true

# Exclude problematic files to avoid conftest duplication issue
exclude = [
    "tests/conftest.py",  # Avoid module name conflicts
]

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "clickhouse_connect.*",
    "scipy.*",
    "numpy.*",
    "pandas.*",
    "polars.*",
    "bokeh.*",
]
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false
ignore_errors = true  # More lenient for test files

# =====================================================================
# Note: Pytest configuration is in pytest.ini to avoid conflicts
# =====================================================================

# =====================================================================
# Coverage Configuration (Code Coverage Analysis)
# =====================================================================
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "test_*",
    "*/__pycache__/*",
    ".mypy_cache/*",
    ".pytest_cache/*",
    ".ruff_cache/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
