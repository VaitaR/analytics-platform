# =====================================================================
# Funnel Analytics Platform - Modern Code Quality Configuration
# =====================================================================

[project]
name = "funnel-analytics-platform"
description = "Enterprise-grade funnel analytics platform for analyzing user conversion journeys"
version = "1.0.0"
requires-python = ">=3.9"

# =====================================================================
# Black Configuration (The Uncompromising Code Formatter)
# =====================================================================
[tool.black]
line-length = 99
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories to exclude
  __pycache__
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | build
  | dist
)/
'''

# =====================================================================
# Ruff Configuration (The Blazing Fast Linter)
# =====================================================================
[tool.ruff]
line-length = 99
target-version = "py39"

# Files to exclude from linting
exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Select comprehensive rule sets for enterprise-grade code quality:
# E/W: pycodestyle errors/warnings (PEP 8 compliance)
# F: pyflakes (undefined names, unused imports, etc.)
# I: isort (import sorting and organization)
# B: flake8-bugbear (finds likely bugs and design problems)
# C4: flake8-comprehensions (better list/dict comprehensions)
# SIM: flake8-simplify (suggests code simplifications)
# UP: pyupgrade (modernize Python syntax)
# N: pep8-naming (enforce PEP 8 naming conventions)
# PIE: flake8-pie (miscellaneous lints)
# RET: flake8-return (return statement improvements)
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "PIE",  # flake8-pie
    "RET",  # flake8-return
]

ignore = [
    "E501",   # Line too long, handled by Black
    "E203",   # Whitespace before ':', conflicts with Black
    "B905",   # zip() without an explicit strict= parameter (Python 3.10+ only)
    "N812",   # Lowercase imported as non-lowercase (for libraries like pandas as pd)
    "N806",   # Variable in function should be lowercase (for scientific variables)
    "SIM108", # Use ternary operator (sometimes less readable)
    "RET504", # Unnecessary assignment before return (sometimes clearer)
]

[tool.ruff.lint.isort]
# Configure import sorting for the project structure
known-first-party = ["models", "path_analyzer"]
known-third-party = ["streamlit", "pandas", "polars", "numpy", "plotly", "clickhouse_connect"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = true
combine-as-imports = true
from-first = false

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like mutable lists (common in data science)
extend-immutable-calls = ["streamlit.cache_data", "streamlit.cache_resource"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 99

# =====================================================================
# Mypy Configuration (The Static Type Checker)
# =====================================================================
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

# Strictness settings (balanced for data science workflows)
check_untyped_defs = true
disallow_untyped_defs = false  # Allow untyped defs for flexibility with data science code
disallow_incomplete_defs = false
disallow_untyped_decorators = false  # Many streamlit decorators are untyped

# Handle missing library type information gracefully
ignore_missing_imports = true
follow_imports = "silent"
show_error_codes = true

# Output configuration
pretty = true
show_column_numbers = true
show_error_context = true

# Performance optimization
cache_dir = ".mypy_cache"
incremental = true

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "clickhouse_connect.*",
    "scipy.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

# =====================================================================
# Pytest Configuration (Testing Framework)
# =====================================================================
[tool.pytest.ini_options]
minversion = "7.4"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

markers = [
    "unit: Unit tests focusing on individual functions/classes",
    "integration: Integration tests for component interactions",
    "performance: Performance and scalability tests",
    "slow: Tests that take longer than 5 seconds to run",
    "basic: Basic functionality tests (happy path scenarios)",
    "edge_case: Edge case and boundary condition tests",
    "polars: Polars-specific functionality tests",
    "conversion_window: Conversion window related tests",
    "counting_method: Counting method algorithm tests",
    "segmentation: Data segmentation and filtering tests",
    "visualization: Chart and visualization tests",
    "timeseries: Time series analysis tests",
]

# =====================================================================
# Coverage Configuration (Code Coverage Analysis)
# =====================================================================
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "test_*",
    "*/__pycache__/*",
    ".mypy_cache/*",
    ".pytest_cache/*",
    ".ruff_cache/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
