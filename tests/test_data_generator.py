"""
Test Data Generator - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–µ—Ç—É –¥–ª—è CI/CD
–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—å –±–æ–ª—å—à–∏–µ CSV —Ñ–∞–π–ª—ã –≤ Git
"""

import json
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import tempfile
import os
from pathlib import Path


class TestDataGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–Ω–µ–ª—å-–∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self, seed=42):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏"""
        np.random.seed(seed)
        self.seed = seed
    
    def generate_demo_events(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ —Å–æ–±—ã—Ç–∏—è"""
        demo_events = [
            {
                "name": "Page View",
                "category": "Navigation",
                "description": "User views a page",
                "frequency": "high",
            },
            {
                "name": "User Sign-Up",
                "category": "Conversion",
                "description": "User creates an account",
                "frequency": "medium",
            },
            {
                "name": "Email Verification",
                "category": "Conversion",
                "description": "User verifies email address",
                "frequency": "medium",
            },
            {
                "name": "First Login",
                "category": "Engagement",
                "description": "User logs in for the first time",
                "frequency": "medium",
            },
            {
                "name": "Profile Setup",
                "category": "Engagement",
                "description": "User completes profile setup",
                "frequency": "medium",
            },
            {
                "name": "First Purchase",
                "category": "Revenue",
                "description": "User makes their first purchase",
                "frequency": "low",
            },
            {
                "name": "Add to Cart",
                "category": "Commerce",
                "description": "User adds item to shopping cart",
                "frequency": "medium",
            },
            {
                "name": "Checkout Started",
                "category": "Commerce",
                "description": "User begins checkout process",
                "frequency": "medium",
            },
            {
                "name": "Payment Completed",
                "category": "Revenue",
                "description": "User completes payment",
                "frequency": "low",
            },
        ]
        return pd.DataFrame(demo_events)
    
    def generate_sample_funnel(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –≤–æ—Ä–æ–Ω–∫–∏"""
        sample_funnel_data = {
            "User Sign-Up": {"users": 10000, "conversion_rate": 100},
            "Verify Email": {"users": 7500, "conversion_rate": 75},
            "First Login": {"users": 6000, "conversion_rate": 60},
            "Profile Setup": {"users": 4500, "conversion_rate": 45},
            "Tutorial Completed": {"users": 3600, "conversion_rate": 36},
        }
        
        return pd.DataFrame({
            "step": list(sample_funnel_data.keys()),
            "users": [data["users"] for data in sample_funnel_data.values()],
            "conversion_rate": [data["conversion_rate"] for data in sample_funnel_data.values()],
        })
    
    def generate_time_series_data(self, days=30):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–∞–Ω–Ω—ã—Ö"""
        dates = pd.date_range(start="2024-01-01", periods=days, freq="D")
        steps = [
            "User Sign-Up",
            "Verify Email", 
            "First Login",
            "Profile Setup",
            "Tutorial Completed",
        ]
        
        time_series_data = {}
        for i, step in enumerate(steps):
            base_value = 1000 * (0.8**i)
            values = np.random.normal(base_value, base_value * 0.1, size=len(dates))
            values = np.maximum(values + np.linspace(0, base_value * 0.2, len(dates)), 0)
            time_series_data[step] = values.round().astype(int)
        
        return pd.DataFrame(time_series_data, index=dates)
    
    def generate_segment_data(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"""
        segments = ["Mobile", "Desktop", "Tablet"]
        steps = ["User Sign-Up", "Verify Email", "First Login", "Profile Setup", "Tutorial Completed"]
        segment_data = {}
        
        for segment in segments:
            segment_data[segment] = {}
            base_value = 1000 if segment == "Mobile" else (800 if segment == "Desktop" else 400)
            for i, step in enumerate(steps):
                drop_rate = 0.75 if segment == "Mobile" else (0.85 if segment == "Desktop" else 0.70)
                segment_data[segment][step] = int(base_value * (drop_rate**i))
        
        df = pd.DataFrame(segment_data)
        df.index = steps
        return df
    
    def generate_time_to_convert_stats(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        time_to_convert = {
            "Verify Email": np.random.exponential(scale=0.5, size=1000) * 60,
            "First Login": np.random.exponential(scale=12, size=1000) * 60,
            "Profile Setup": np.random.exponential(scale=24, size=1000) * 60,
            "First Purchase": np.random.exponential(scale=72, size=1000) * 60,
        }
        
        df = pd.DataFrame(time_to_convert)
        return df.describe()
    
    def generate_ab_test_data(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ A/B —Ç–µ—Å—Ç–æ–≤"""
        ab_test_data = {
            "Variant A": {
                "User Sign-Up": 5000,
                "Verify Email": 4000,
                "First Login": 3400,
                "Profile Setup": 2800,
                "First Purchase": 2100,
            },
            "Variant B": {
                "User Sign-Up": 5000,
                "Verify Email": 4200,
                "First Login": 3650,
                "Profile Setup": 3100,
                "First Purchase": 2400,
            },
        }
        return pd.DataFrame(ab_test_data)
    
    def generate_ab_test_rates(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ A/B —Ç–µ—Å—Ç–æ–≤"""
        df_ab_test = self.generate_ab_test_data()
        return df_ab_test.div(df_ab_test.iloc[0]) * 100
    
    def generate_large_dataset(self, size=50000):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        np.random.seed(self.seed)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = [f"user_{i:06d}" for i in range(1, size + 1)]
        
        # –°–æ–±—ã—Ç–∏—è –≤–æ—Ä–æ–Ω–∫–∏
        events = ["Page View", "Sign Up", "Email Verified", "First Login", "Purchase"]
        
        data = []
        for user_id in user_ids:
            # –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            base_time = datetime.now() - timedelta(days=np.random.randint(1, 365))
            
            for i, event in enumerate(events):
                # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
                if np.random.random() < (0.8 ** i):
                    timestamp = base_time + timedelta(
                        hours=np.random.randint(0, 24 * (i + 1))
                    )
                    data.append({
                        "user_id": user_id,
                        "event": event,
                        "timestamp": timestamp,
                        "platform": np.random.choice(["mobile", "desktop", "tablet"], p=[0.6, 0.3, 0.1]),
                        "country": np.random.choice(["US", "UK", "CA", "AU", "DE"]),
                        "user_type": np.random.choice(["new", "returning", "premium"], p=[0.5, 0.4, 0.1])
                    })
                else:
                    break  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—ã–ª –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
        
        return pd.DataFrame(data)
    
    def ensure_test_data_exists(self, force_regenerate=False):
        """
        –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ CI)
        """
        test_data_dir = Path("test_data")
        test_data_dir.mkdir(exist_ok=True)
        
        files_to_generate = {
            "demo_events.csv": self.generate_demo_events,
            "sample_funnel.csv": self.generate_sample_funnel,
            "time_series_data.csv": self.generate_time_series_data,
            "segment_data.csv": self.generate_segment_data,
            "time_to_convert_stats.csv": self.generate_time_to_convert_stats,
            "ab_test_data.csv": self.generate_ab_test_data,
            "ab_test_rates.csv": self.generate_ab_test_rates,
        }
        
        for filename, generator_func in files_to_generate.items():
            filepath = test_data_dir / filename
            
            if force_regenerate or not filepath.exists():
                print(f"üîÑ Generating {filename}...")
                df = generator_func()
                df.to_csv(filepath, index=True if "time_series" in filename else False)
                print(f"‚úÖ Generated {filename}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        large_files = {
            "test_50k.csv": lambda: self.generate_large_dataset(50000),
            "test_200k.csv": lambda: self.generate_large_dataset(200000),
        }
        
        for filename, generator_func in large_files.items():
            filepath = test_data_dir / filename
            if force_regenerate or not filepath.exists():
                print(f"üîÑ Generating large dataset {filename}...")
                df = generator_func()
                df.to_csv(filepath, index=False)
                print(f"‚úÖ Generated {filename}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
def ensure_test_data():
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã"""
    generator = TestDataGenerator()
    generator.ensure_test_data_exists()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def create_temp_test_data():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    generator = TestDataGenerator()
    temp_dir = tempfile.mkdtemp()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    files = {
        "demo_events.csv": generator.generate_demo_events(),
        "sample_funnel.csv": generator.generate_sample_funnel(),
        "time_series_data.csv": generator.generate_time_series_data(),
    }
    
    for filename, df in files.items():
        filepath = os.path.join(temp_dir, filename)
        df.to_csv(filepath, index=False)
    
    return temp_dir


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é
    print("üîÑ Generating test data...")
    generator = TestDataGenerator()
    generator.ensure_test_data_exists(force_regenerate=True)
    print("‚úÖ All test data generated successfully!") 